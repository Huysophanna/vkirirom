"use strict";
var config_1 = require('./util/config');
var logger_1 = require('./util/logger');
var path_1 = require('path');
var fs_1 = require('fs');
var watch_1 = require('./watch');
var chalk = require('chalk');
var devLogger = require('./dev-server/injector');
var http = require('http');
var liveReload = require('./dev-server/live-reload');
var devServer = require('./dev-server/dev-server');
var mime = require('mime-types');
var httpServer;
function serve(context) {
    context = config_1.generateContext(context);
    return watch_1.watch(context)
        .then(function () {
        createDevServer(context);
    }, function () {
        createDevServer(context);
    });
}
exports.serve = serve;
function createDevServer(context) {
    var port = getHttpServerPort();
    var host = getHttpServerHost();
    var address = host || 'localhost';
    function httpServerListen() {
        httpServer.listen(port, host, undefined, function () {
            logger_1.Logger.info(chalk.green("dev server running: http://" + address + ":" + port + "/"));
            if (liveReload.useLiveReload()) {
                liveReload.createLiveReloadServer(host);
            }
            if (devLogger.useDevLogger()) {
                devServer.createWebSocketServer();
            }
        });
    }
    if (httpServer) {
        httpServer.close();
    }
    httpServer = http.createServer(function (request, response) {
        devServerListener(context, request, response);
    });
    httpServer.on('error', function (err) {
        if (err.code === 'EADDRINUSE') {
            logger_1.Logger.error("server already in use, retrying....");
            setTimeout(function () {
                httpServer.close();
                httpServerListen();
            }, 1500);
        }
    });
    httpServerListen();
}
exports.createDevServer = createDevServer;
function devServerListener(context, request, response) {
    if (devLogger.isDevLoggerUrl(request.url)) {
        devLogger.responseDevLogger(request, response);
        return;
    }
    var filePath = '.' + request.url.split('?')[0];
    if (filePath === './') {
        filePath = './index.html';
    }
    filePath = path_1.join(context.wwwDir, filePath);
    fs_1.readFile(filePath, function (err, content) {
        if (err) {
            // gahh!
            responseError(err, filePath, request, response);
        }
        else {
            // 200!! found the file, let's send back dat data
            responseSuccess(context, filePath, content, response);
        }
    });
}
exports.devServerListener = devServerListener;
function responseSuccess(context, filePath, content, response) {
    var headers = {
        'Content-Type': mime.lookup(filePath) || 'application/octet-stream',
        'X-DEV-FILE-PATH': filePath
    };
    response.writeHead(200, headers);
    if (isRootIndexFile(context, filePath)) {
        if (liveReload.useLiveReload()) {
            content = liveReload.injectLiveReloadScript(content);
        }
        if (devLogger.useDevLogger()) {
            content = devLogger.injectDevLoggerScript(content);
        }
    }
    response.end(content, mime.charset(headers['Content-Type']));
}
function responseError(err, filePath, request, response) {
    if (err.code === 'ENOENT') {
        // dev file not found!
        response404(filePath, request, response);
    }
    else {
        // derp, 500?!!
        logger_1.Logger.error("http server error: " + err);
        response.writeHead(500, { 'Content-Type': 'text/html' });
        response.end("Sorry, check with the site admin for error: " + err.code + " ..\n");
    }
}
function response404(filePath, request, response) {
    if (filePath.indexOf('/cordova.js') > -1) {
        // mock the cordova.js file during dev
        response.writeHead(200, { 'Content-Type': 'application/javascript' });
        response.end('// mock cordova file during development');
        return;
    }
    // 404!!!
    response.writeHead(404, { 'Content-Type': 'text/html' });
    response.end("File not found: " + request.url + "<br>Local file: " + filePath);
}
function getHttpServerPort() {
    var port = config_1.getConfigValueDefault('--port', '-p', 'ionic_port', null);
    if (port) {
        return parseInt(port, 10);
    }
    return DEV_SERVER_DEFAULT_PORT;
}
function getHttpServerHost() {
    var host = config_1.getConfigValueDefault('--address', '-h', 'ionic_address', null);
    if (host) {
        return host;
    }
}
function isRootIndexFile(context, filePath) {
    return (filePath === context.wwwIndex);
}
function useServerLogs() {
    return config_1.hasConfigValue('--serverlogs', '-s', 'ionic_serverlogs', false);
}
function launchBrowser() {
    return !config_1.hasConfigValue('--nobrowser', '-b', 'ionic_launch_browser', false);
}
function browserToLaunch() {
    return config_1.getConfigValueDefault('--browser', '-w', 'ionic_browser', null);
}
function browserOption() {
    return config_1.getConfigValueDefault('--browseroption', '-o', 'ionic_browseroption', null);
}
function launchLab() {
    return config_1.hasConfigValue('--lab', '-l', 'ionic_lab', false);
}
var DEV_SERVER_DEFAULT_PORT = 8100;
