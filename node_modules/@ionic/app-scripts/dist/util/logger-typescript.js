"use strict";
var logger_1 = require('./logger');
var ts = require('typescript');
/**
 * Ok, so formatting overkill, we know. But whatever, it makes for great
 * error reporting within a terminal. So, yeah, let's code it up, shall we?
 */
function runDiagnostics(context, program) {
    var diagnostics = program.getSyntacticDiagnostics()
        .concat(program.getSemanticDiagnostics())
        .concat(program.getOptionsDiagnostics());
    diagnostics.forEach(function (d) {
        printDiagnostic(context, d);
    });
    // returns true if there were diagnostics
    return (diagnostics.length > 0);
}
exports.runDiagnostics = runDiagnostics;
function printDiagnostic(context, d) {
    var header = 'typescript error';
    if (d.file) {
        var line = d.file.getLineAndCharacterOfPosition(d.start).line;
        header = logger_1.Logger.formatHeader('typescript', d.file.fileName, context.rootDir, line + 1);
    }
    logger_1.Logger.error("" + header);
    var message = ts.flattenDiagnosticMessageText(d.messageText, '\n');
    logger_1.Logger.wordWrap([message]).forEach(function (m) {
        console.log(m);
    });
    logger_1.Logger.newLine();
    if (d.file) {
        printCodeHighlight(d);
    }
}
exports.printDiagnostic = printDiagnostic;
function printCodeHighlight(d) {
    var _a = d.file.getLineAndCharacterOfPosition(d.start), line = _a.line, character = _a.character;
    var srcLines = d.file.getText().replace(/\\r/g, '\n').split('\n');
    var errorLine = {
        lineNumber: line + 1,
        text: srcLines[line]
    };
    if (!errorLine.text || !errorLine.text.trim().length) {
        return;
    }
    var printLines = [];
    if (line > 0 && logger_1.Logger.meaningfulLine(srcLines[line - 1])) {
        var beforeLine = {
            lineNumber: line,
            text: srcLines[line - 1]
        };
        if (logger_1.Logger.INDENT.length + beforeLine.text.length > logger_1.Logger.MAX_LEN) {
            beforeLine.text = beforeLine.text.substr(0, logger_1.Logger.MAX_LEN - logger_1.Logger.INDENT.length - 1);
        }
        printLines.push(beforeLine);
    }
    errorLine.text = logger_1.Logger.highlightError(errorLine.text, character, d.length);
    printLines.push(errorLine);
    if (line + 1 < srcLines.length && logger_1.Logger.meaningfulLine(srcLines[line + 1])) {
        var afterLine = {
            lineNumber: line + 2,
            text: srcLines[line + 1]
        };
        if (logger_1.Logger.INDENT.length + afterLine.text.length > logger_1.Logger.MAX_LEN) {
            afterLine.text = afterLine.text.substr(0, logger_1.Logger.MAX_LEN - logger_1.Logger.INDENT.length - 1);
        }
        printLines.push(afterLine);
    }
    logger_1.Logger.printErrorLines(printLines);
}
