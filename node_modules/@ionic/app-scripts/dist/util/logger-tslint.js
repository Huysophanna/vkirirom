"use strict";
var logger_1 = require('./logger');
function printFailures(context, failures) {
    if (failures) {
        failures.forEach(function (failure) {
            printFailure(context, failure);
        });
    }
}
exports.printFailures = printFailures;
function printFailure(context, f) {
    var start = f.startPosition.toJson();
    var end = f.endPosition.toJson();
    var header = logger_1.Logger.formatHeader('tslint', f.fileName, context.rootDir, start.line + 1, end.line + 1);
    logger_1.Logger.warn(header);
    logger_1.Logger.wordWrap([f.failure]).forEach(function (m) {
        console.log(m);
    });
    logger_1.Logger.newLine();
    if (f.sourceFile && f.sourceFile.text) {
        printCodeHighlight(f, f.sourceFile.text, start, end);
    }
}
function printCodeHighlight(f, sourceText, start, end) {
    var srcLines = sourceText.replace(/\\r/g, '\n').split('\n');
    var errorLines = [];
    for (var i = start.line; i <= end.line; i++) {
        if (srcLines[i].trim().length) {
            errorLines.push({
                lineNumber: i + 1,
                text: srcLines[i]
            });
        }
    }
    if (!errorLines.length) {
        return;
    }
    if (errorLines.length === 1) {
        var errorCharStart = start.character;
        var errorCharLength = 0;
        for (var i = errorCharStart; i < errorLines[0].text.length; i++) {
            var lineChar = errorLines[0].text.charAt(i);
            if (STOP_CHARS.indexOf(lineChar) > -1) {
                break;
            }
            errorCharLength++;
        }
        errorLines[0].text = logger_1.Logger.highlightError(errorLines[0].text, errorCharStart, errorCharLength);
    }
    if (start.line > 0 && logger_1.Logger.meaningfulLine(srcLines[start.line - 1])) {
        var beforeLine = {
            lineNumber: start.line,
            text: srcLines[start.line - 1]
        };
        if (logger_1.Logger.INDENT.length + beforeLine.text.length > logger_1.Logger.MAX_LEN) {
            beforeLine.text = beforeLine.text.substr(0, logger_1.Logger.MAX_LEN - logger_1.Logger.INDENT.length - 1);
        }
        errorLines.unshift(beforeLine);
    }
    if (end.line < srcLines.length && logger_1.Logger.meaningfulLine(srcLines[end.line + 1])) {
        var afterLine = {
            lineNumber: end.line + 2,
            text: srcLines[end.line + 1]
        };
        if (logger_1.Logger.INDENT.length + afterLine.text.length > logger_1.Logger.MAX_LEN) {
            afterLine.text = afterLine.text.substr(0, logger_1.Logger.MAX_LEN - logger_1.Logger.INDENT.length - 1);
        }
        errorLines.push(afterLine);
    }
    logger_1.Logger.printErrorLines(errorLines);
}
var STOP_CHARS = [' ', '=', ',', '.', '\t', '{', '}', '(', ')', '"', '\'', '`', '?', ':', ';', '+', '-', '*', '/', '<', '>', '&', '[', ']', '|'];
