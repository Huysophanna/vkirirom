"use strict";
var fs_extra_1 = require('fs-extra');
var logger_1 = require('./logger');
var path_1 = require('path');
var os_1 = require('os');
var tsFiles;
exports.objectAssign = (Object.assign) ? Object.assign : function (target, source) {
    var output = Object(target);
    for (var index = 1; index < arguments.length; index++) {
        source = arguments[index];
        if (source !== undefined && source !== null) {
            for (var key in source) {
                if (source.hasOwnProperty(key)) {
                    output[key] = source[key];
                }
            }
        }
    }
    return output;
};
function endsWith(str, tail) {
    if (str && tail) {
        return !tail.length || str.slice(-tail.length).toLowerCase() === tail.toLowerCase();
    }
    return false;
}
exports.endsWith = endsWith;
function writeFileAsync(filePath, content) {
    return new Promise(function (resolve, reject) {
        fs_extra_1.writeFile(filePath, content, function (err) {
            if (err) {
                reject(new logger_1.BuildError(err));
            }
            else {
                resolve();
            }
        });
    });
}
exports.writeFileAsync = writeFileAsync;
function readFileAsync(filePath) {
    return new Promise(function (resolve, reject) {
        fs_extra_1.readFile(filePath, 'utf-8', function (err, buffer) {
            if (err) {
                reject(new logger_1.BuildError(err));
            }
            else {
                resolve(buffer);
            }
        });
    });
}
exports.readFileAsync = readFileAsync;
function setModulePathsCache(modulePaths) {
    // async save the module paths for later lookup
    var modulesCachePath = getModulesPathsCachePath();
    logger_1.Logger.debug("Cached module paths: " + (modulePaths && modulePaths.length) + ", " + modulesCachePath);
    fs_extra_1.outputJson(modulesCachePath, modulePaths, function (err) {
        if (err) {
            logger_1.Logger.error("Error writing module paths cache: " + err);
        }
    });
}
exports.setModulePathsCache = setModulePathsCache;
function getModulesPathsCachePath() {
    // make a unique tmp directory for this project's module paths cache file
    var cwd = process.cwd().replace(/-|:|\/|\\|\.|~|;|\s/g, '').toLowerCase();
    if (cwd.length > 40) {
        cwd = cwd.substr(cwd.length - 40);
    }
    return path_1.join(os_1.tmpdir(), cwd, 'modulepaths.json');
}
exports.getModulesPathsCachePath = getModulesPathsCachePath;
function getModulePathsCache() {
    // sync get the cached array of module paths (if they exist)
    var modulePaths = null;
    var modulesCachePath = getModulesPathsCachePath();
    try {
        modulePaths = fs_extra_1.readJsonSync(modulesCachePath, { throws: false });
        logger_1.Logger.debug("Cached module paths: " + (modulePaths && modulePaths.length) + ", " + modulesCachePath);
    }
    catch (e) {
        logger_1.Logger.debug("Cached module paths not found: " + modulesCachePath);
    }
    return modulePaths;
}
exports.getModulePathsCache = getModulePathsCache;
function cacheTranspiledTsFiles(inTsFiles) {
    tsFiles = inTsFiles;
}
exports.cacheTranspiledTsFiles = cacheTranspiledTsFiles;
function getCachedTranspiledTsFiles() {
    return tsFiles;
}
exports.getCachedTranspiledTsFiles = getCachedTranspiledTsFiles;
