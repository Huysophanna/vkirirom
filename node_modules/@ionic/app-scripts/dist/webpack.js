"use strict";
var logger_1 = require('./util/logger');
var helpers_1 = require('./util/helpers');
var events_1 = require('./util/events');
var config_1 = require('./util/config');
var in_memory_file_system_1 = require('./util/in-memory-file-system');
var path_1 = require('path');
var wp = require('webpack');
function webpack(context, configFile) {
    context = config_1.generateContext(context);
    configFile = config_1.getUserConfigFile(context, taskInfo, configFile);
    helpers_1.cacheTranspiledTsFiles(context.tsFiles);
    var logger = new logger_1.Logger('webpack');
    events_1.emit(events_1.EventType.BundlerStart, context);
    return webpackWorker(context, configFile)
        .then(function () {
        events_1.emit(events_1.EventType.BunderFinish, context);
        logger.finish();
    })
        .catch(function (err) {
        throw logger.fail(err);
    });
}
exports.webpack = webpack;
function webpackUpdate(event, path, context, configFile) {
    configFile = config_1.getUserConfigFile(context, taskInfo, configFile);
    var logger = new logger_1.Logger('webpack update');
    helpers_1.cacheTranspiledTsFiles(context.tsFiles);
    events_1.emit(events_1.EventType.BundlerStart, context);
    return webpackWorker(context, configFile)
        .then(function () {
        events_1.emit(events_1.EventType.BunderFinish, context);
        logger.finish();
    })
        .catch(function (err) {
        throw logger.fail(err);
    });
}
exports.webpackUpdate = webpackUpdate;
function webpackWorker(context, configFile) {
    return new Promise(function (resolve, reject) {
        try {
            var webpackConfig_1 = getWebpackConfig(context, configFile);
            var compiler = wp(webpackConfig_1);
            // wrap the default webpack file system with our custom version
            compiler.inputFileSystem = new in_memory_file_system_1.InMemoryFileSystem(compiler.inputFileSystem, context.tsFiles);
            compiler.run(function (err, stats) {
                if (err) {
                    reject(err);
                }
                else {
                    // set the module files used in this bundle
                    // this reference can be used elsewhere in the build (sass)
                    var files = stats.compilation.modules.map(function (webpackObj) {
                        if (webpackObj.resource) {
                            return webpackObj.resource;
                        }
                        else {
                            return webpackObj.context;
                        }
                    }).filter(function (path) {
                        // just make sure the path is not null
                        return path && path.length > 0;
                    });
                    context.moduleFiles = files;
                    // async cache all the module paths so we don't need
                    // to always bundle to know which modules are used
                    helpers_1.setModulePathsCache(context.moduleFiles);
                    events_1.emit(events_1.EventType.FileChange, context, webpackConfig_1.output.path);
                    resolve();
                }
            });
        }
        catch (e) {
            reject(new logger_1.BuildError(e));
        }
    });
}
exports.webpackWorker = webpackWorker;
function getWebpackConfig(context, configFile) {
    configFile = config_1.getUserConfigFile(context, taskInfo, configFile);
    var webpackConfig = config_1.fillConfigDefaults(configFile, taskInfo.defaultConfigFile);
    webpackConfig.entry = config_1.replacePathVars(context, webpackConfig.entry);
    webpackConfig.output.path = config_1.replacePathVars(context, webpackConfig.output.path);
    return webpackConfig;
}
exports.getWebpackConfig = getWebpackConfig;
function getOutputDest(context, webpackConfig) {
    return path_1.join(webpackConfig.output.path, webpackConfig.output.filename);
}
exports.getOutputDest = getOutputDest;
var taskInfo = {
    fullArgConfig: '--webpack',
    shortArgConfig: '-w',
    envConfig: 'ionic_webpack',
    defaultConfigFile: 'webpack.config'
};
