"use strict";
var watch_1 = require('../watch');
describe('watch', function () {
    describe('prepareWatcher', function () {
        it('should do nothing when options.ignored is a function', function () {
            var ignoreFn = function () { };
            var watcher = { options: { ignored: ignoreFn } };
            var context = { srcDir: '/some/src/' };
            watch_1.prepareWatcher(context, watcher);
            expect(watcher.options.ignored).toBe(ignoreFn);
        });
        it('should set replacePathVars when options.ignored is a string', function () {
            var watcher = { options: { ignored: '{{SRC}}/**/*.spec.ts' } };
            var context = { srcDir: '/some/src/' };
            watch_1.prepareWatcher(context, watcher);
            expect(watcher.options.ignored).toEqual('/some/src/**/*.spec.ts');
        });
        it('should set replacePathVars when paths is an array', function () {
            var watcher = { paths: [
                    '{{SRC}}/some/path1',
                    '{{SRC}}/some/path2'
                ] };
            var context = { srcDir: '/some/src/' };
            watch_1.prepareWatcher(context, watcher);
            expect(watcher.paths.length).toEqual(2);
            expect(watcher.paths[0]).toEqual('/some/src/some/path1');
            expect(watcher.paths[1]).toEqual('/some/src/some/path2');
        });
        it('should set replacePathVars when paths is a string', function () {
            var watcher = { paths: '{{SRC}}/some/path' };
            var context = { srcDir: '/some/src/' };
            watch_1.prepareWatcher(context, watcher);
            expect(watcher.paths).toEqual('/some/src/some/path');
        });
        it('should not set options.ignoreInitial if it was provided', function () {
            var watcher = { options: { ignoreInitial: false } };
            var context = {};
            watch_1.prepareWatcher(context, watcher);
            expect(watcher.options.ignoreInitial).toEqual(false);
        });
        it('should set options.ignoreInitial to true if it wasnt provided', function () {
            var watcher = { options: {} };
            var context = {};
            watch_1.prepareWatcher(context, watcher);
            expect(watcher.options.ignoreInitial).toEqual(true);
        });
        it('should not set options.cwd from context.rootDir if it was provided', function () {
            var watcher = { options: { cwd: '/my/cwd/' } };
            var context = { rootDir: '/my/root/dir/' };
            watch_1.prepareWatcher(context, watcher);
            expect(watcher.options.cwd).toEqual('/my/cwd/');
        });
        it('should set options.cwd from context.rootDir if it wasnt provided', function () {
            var watcher = {};
            var context = { rootDir: '/my/root/dir/' };
            watch_1.prepareWatcher(context, watcher);
            expect(watcher.options.cwd).toEqual(context.rootDir);
        });
        it('should create watcher options when not provided', function () {
            var watcher = {};
            var context = {};
            watch_1.prepareWatcher(context, watcher);
            expect(watcher.options).toBeDefined();
        });
    });
});
