"use strict";
var path_1 = require('path');
var pluginutils = require('rollup-pluginutils');
function ionCompiler(context) {
    var filter = pluginutils.createFilter(INCLUDE, EXCLUDE);
    return {
        name: 'ion-compiler',
        transform: function (sourceText, sourcePath) {
            if (!filter(sourcePath)) {
                return null;
            }
            if (context.tsFiles) {
                var file = context.tsFiles[sourcePath];
                if (!file || !file.output) {
                    console.error("unable to find " + sourcePath);
                    return null;
                }
                return {
                    code: file.output,
                    map: file.map
                };
            }
            return null;
        },
        resolveId: function (importee, importer) {
            return resolveId(importee, importer, context);
        },
        load: function (sourcePath) {
            if (context.tsFiles) {
                var file = context.tsFiles[sourcePath];
                if (file && file.input) {
                    return file.input;
                }
            }
            return null;
        }
    };
}
exports.ionCompiler = ionCompiler;
function resolveId(importee, importer, context) {
    if (!importer || /\0/.test(importee)) {
        // disregard entry module
        // ignore IDs with null character, these belong to other plugins
        return null;
    }
    if (context.tsFiles) {
        var importerFile = context.tsFiles[importer];
        if (importerFile && importerFile.output) {
            var attemptedImporteeBasename = path_1.resolve(path_1.join(path_1.dirname(importer), importee));
            var attemptedImportee = attemptedImporteeBasename + '.ts';
            var importeeFile = context.tsFiles[attemptedImportee];
            if (importeeFile) {
                return attemptedImportee;
            }
            else {
                // rather than a file, the attempedImportee could be a directory
                // while via node resolve pattern auto resolves to index file
                var attemptedImporteeIndex = path_1.resolve(path_1.join(attemptedImporteeBasename, 'index.ts'));
                var importeeIndexFile = context.tsFiles[attemptedImporteeIndex];
                if (importeeIndexFile) {
                    return attemptedImporteeIndex;
                }
            }
        }
    }
    return null;
}
exports.resolveId = resolveId;
var INCLUDE = ['*.ts+(|x)', '**/*.ts+(|x)'];
var EXCLUDE = ['*.d.ts', '**/*.d.ts'];
