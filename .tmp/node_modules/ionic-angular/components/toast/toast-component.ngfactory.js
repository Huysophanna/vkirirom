/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/element';
import * as import3 from 'ionic-angular/components/toast/toast-component';
import * as import4 from '@angular/core/src/linker/view_utils';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/change_detection';
import * as import8 from 'ionic-angular/navigation/view-controller';
import * as import9 from 'ionic-angular/config/config';
import * as import10 from '@angular/core/src/linker/element_ref';
import * as import11 from 'ionic-angular/navigation/nav-params';
import * as import12 from '@angular/core/src/metadata/view';
import * as import13 from '@angular/core/src/linker/component_factory';
import * as import14 from '@angular/common/src/directives/ng_if';
import * as import15 from '@angular/core/src/linker/template_ref';
import * as import16 from 'ionic-angular/components/button/button';
import * as import17 from '../button/button.ngfactory';
var renderType_ToastCmp_Host = null;
var _View_ToastCmp_Host0 = (function (_super) {
    __extends(_View_ToastCmp_Host0, _super);
    function _View_ToastCmp_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_ToastCmp_Host0, renderType_ToastCmp_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_ToastCmp_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('ion-toast', rootSelector, null);
        this.renderer.setElementAttribute(this._el_0, 'role', 'dialog');
        this._appEl_0 = new import2.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_ToastCmp0(this.viewUtils, this.injector(0), this._appEl_0);
        this._ToastCmp_0_4 = new import3.ToastCmp(this.parentInjector.get(import8.ViewController), this.parentInjector.get(import9.Config), new import10.ElementRef(this._el_0), this.parentInjector.get(import11.NavParams), this.renderer);
        this._appEl_0.initComponent(this._ToastCmp_0_4, [], compView_0);
        compView_0.create(this._ToastCmp_0_4, this.projectableNodes, null);
        this._expr_0 = import7.UNINITIALIZED;
        this._expr_1 = import7.UNINITIALIZED;
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_ToastCmp_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import3.ToastCmp) && (0 === requestNodeIndex))) {
            return this._ToastCmp_0_4;
        }
        return notFoundResult;
    };
    _View_ToastCmp_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this.detectContentChildrenChanges(throwOnChange);
        var currVal_0 = this._ToastCmp_0_4.hdrId;
        if (import4.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this.renderer.setElementAttribute(this._el_0, 'aria-labelledby', ((currVal_0 == null) ? null : currVal_0.toString()));
            this._expr_0 = currVal_0;
        }
        var currVal_1 = this._ToastCmp_0_4.descId;
        if (import4.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this.renderer.setElementAttribute(this._el_0, 'aria-describedby', ((currVal_1 == null) ? null : currVal_1.toString()));
            this._expr_1 = currVal_1;
        }
        this.detectViewChildrenChanges(throwOnChange);
        if (!throwOnChange) {
            if ((this.numberOfChecks === 0)) {
                this._ToastCmp_0_4.ngAfterViewInit();
            }
        }
    };
    return _View_ToastCmp_Host0;
}(import1.AppView));
function viewFactory_ToastCmp_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_ToastCmp_Host === null)) {
        (renderType_ToastCmp_Host = viewUtils.createRenderComponentType('', 0, import12.ViewEncapsulation.None, [], {}));
    }
    return new _View_ToastCmp_Host0(viewUtils, parentInjector, declarationEl);
}
export var ToastCmpNgFactory = new import13.ComponentFactory('ion-toast', viewFactory_ToastCmp_Host0, import3.ToastCmp);
var styles_ToastCmp = [];
var renderType_ToastCmp = null;
var _View_ToastCmp0 = (function (_super) {
    __extends(_View_ToastCmp0, _super);
    function _View_ToastCmp0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_ToastCmp0, renderType_ToastCmp, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_ToastCmp0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = this.renderer.createElement(parentRenderNode, 'div', null);
        this.renderer.setElementAttribute(this._el_0, 'class', 'toast-wrapper');
        this._text_1 = this.renderer.createText(this._el_0, ' ', null);
        this._el_2 = this.renderer.createElement(this._el_0, 'div', null);
        this.renderer.setElementAttribute(this._el_2, 'class', 'toast-container');
        this._text_3 = this.renderer.createText(this._el_2, ' ', null);
        this._anchor_4 = this.renderer.createTemplateAnchor(this._el_2, null);
        this._appEl_4 = new import2.AppElement(4, 2, this, this._anchor_4);
        this._TemplateRef_4_5 = new import15.TemplateRef_(this._appEl_4, viewFactory_ToastCmp1);
        this._NgIf_4_6 = new import14.NgIf(this._appEl_4.vcRef, this._TemplateRef_4_5);
        this._text_5 = this.renderer.createText(this._el_2, ' ', null);
        this._anchor_6 = this.renderer.createTemplateAnchor(this._el_2, null);
        this._appEl_6 = new import2.AppElement(6, 2, this, this._anchor_6);
        this._TemplateRef_6_5 = new import15.TemplateRef_(this._appEl_6, viewFactory_ToastCmp2);
        this._NgIf_6_6 = new import14.NgIf(this._appEl_6.vcRef, this._TemplateRef_6_5);
        this._text_7 = this.renderer.createText(this._el_2, ' ', null);
        this._text_8 = this.renderer.createText(this._el_0, ' ', null);
        this._expr_0 = import7.UNINITIALIZED;
        this._expr_1 = import7.UNINITIALIZED;
        this._expr_2 = import7.UNINITIALIZED;
        this._expr_3 = import7.UNINITIALIZED;
        this._expr_4 = import7.UNINITIALIZED;
        this.init([], [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._anchor_4,
            this._text_5,
            this._anchor_6,
            this._text_7,
            this._text_8
        ], [], []);
        return null;
    };
    _View_ToastCmp0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import15.TemplateRef) && (4 === requestNodeIndex))) {
            return this._TemplateRef_4_5;
        }
        if (((token === import14.NgIf) && (4 === requestNodeIndex))) {
            return this._NgIf_4_6;
        }
        if (((token === import15.TemplateRef) && (6 === requestNodeIndex))) {
            return this._TemplateRef_6_5;
        }
        if (((token === import14.NgIf) && (6 === requestNodeIndex))) {
            return this._NgIf_6_6;
        }
        return notFoundResult;
    };
    _View_ToastCmp0.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_3 = this.context.d.message;
        if (import4.checkBinding(throwOnChange, this._expr_3, currVal_3)) {
            this._NgIf_4_6.ngIf = currVal_3;
            this._expr_3 = currVal_3;
        }
        var currVal_4 = this.context.d.showCloseButton;
        if (import4.checkBinding(throwOnChange, this._expr_4, currVal_4)) {
            this._NgIf_6_6.ngIf = currVal_4;
            this._expr_4 = currVal_4;
        }
        this.detectContentChildrenChanges(throwOnChange);
        var currVal_0 = (this.context.d.position === 'bottom');
        if (import4.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this.renderer.setElementClass(this._el_0, 'toast-bottom', currVal_0);
            this._expr_0 = currVal_0;
        }
        var currVal_1 = (this.context.d.position === 'middle');
        if (import4.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this.renderer.setElementClass(this._el_0, 'toast-middle', currVal_1);
            this._expr_1 = currVal_1;
        }
        var currVal_2 = (this.context.d.position === 'top');
        if (import4.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            this.renderer.setElementClass(this._el_0, 'toast-top', currVal_2);
            this._expr_2 = currVal_2;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_ToastCmp0;
}(import1.AppView));
export function viewFactory_ToastCmp0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_ToastCmp === null)) {
        (renderType_ToastCmp = viewUtils.createRenderComponentType('', 0, import12.ViewEncapsulation.None, styles_ToastCmp, {}));
    }
    return new _View_ToastCmp0(viewUtils, parentInjector, declarationEl);
}
var _View_ToastCmp1 = (function (_super) {
    __extends(_View_ToastCmp1, _super);
    function _View_ToastCmp1(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_ToastCmp1, renderType_ToastCmp, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_ToastCmp1.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.renderer.createElement(null, 'div', null);
        this.renderer.setElementAttribute(this._el_0, 'class', 'toast-message');
        this._text_1 = this.renderer.createText(this._el_0, '', null);
        this._expr_0 = import7.UNINITIALIZED;
        this._expr_1 = import7.UNINITIALIZED;
        this.init([].concat([this._el_0]), [
            this._el_0,
            this._text_1
        ], [], []);
        return null;
    };
    _View_ToastCmp1.prototype.detectChangesInternal = function (throwOnChange) {
        this.detectContentChildrenChanges(throwOnChange);
        var currVal_0 = import4.interpolate(1, '', this.parent.context.hdrId, '');
        if (import4.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this.renderer.setElementProperty(this._el_0, 'id', currVal_0);
            this._expr_0 = currVal_0;
        }
        var currVal_1 = import4.interpolate(1, '', this.parent.context.d.message, '');
        if (import4.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this.renderer.setText(this._text_1, currVal_1);
            this._expr_1 = currVal_1;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_ToastCmp1;
}(import1.AppView));
function viewFactory_ToastCmp1(viewUtils, parentInjector, declarationEl) {
    return new _View_ToastCmp1(viewUtils, parentInjector, declarationEl);
}
var _View_ToastCmp2 = (function (_super) {
    __extends(_View_ToastCmp2, _super);
    function _View_ToastCmp2(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_ToastCmp2, renderType_ToastCmp, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_ToastCmp2.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.renderer.createElement(null, 'button', null);
        this.renderer.setElementAttribute(this._el_0, 'class', 'toast-button');
        this.renderer.setElementAttribute(this._el_0, 'clear', '');
        this.renderer.setElementAttribute(this._el_0, 'ion-button', '');
        this._appEl_0 = new import2.AppElement(0, null, this, this._el_0);
        var compView_0 = import17.viewFactory_Button0(this.viewUtils, this.injector(0), this._appEl_0);
        this._Button_0_4 = new import16.Button(null, '', this.parent.parentInjector.get(import9.Config), new import10.ElementRef(this._el_0), this.renderer);
        this._appEl_0.initComponent(this._Button_0_4, [], compView_0);
        this._text_1 = this.renderer.createText(null, '', null);
        compView_0.create(this._Button_0_4, [[].concat([this._text_1])], null);
        var disposable_0 = this.renderer.listen(this._el_0, 'click', this.eventHandler(this._handle_click_0_0.bind(this)));
        this._expr_1 = import7.UNINITIALIZED;
        this._expr_2 = import7.UNINITIALIZED;
        this.init([].concat([this._el_0]), [
            this._el_0,
            this._text_1
        ], [disposable_0], []);
        return null;
    };
    _View_ToastCmp2.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import16.Button) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) {
            return this._Button_0_4;
        }
        return notFoundResult;
    };
    _View_ToastCmp2.prototype.detectChangesInternal = function (throwOnChange) {
        var changed = true;
        changed = false;
        var currVal_1 = '';
        if (import4.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this._Button_0_4.clear = currVal_1;
            changed = true;
            this._expr_1 = currVal_1;
        }
        if (changed) {
            this._appEl_0.componentView.markAsCheckOnce();
        }
        this.detectContentChildrenChanges(throwOnChange);
        if (!throwOnChange) {
            if ((this.numberOfChecks === 0)) {
                this._Button_0_4.ngAfterContentInit();
            }
        }
        var currVal_2 = import4.interpolate(1, ' ', (this.parent.context.d.closeButtonText || 'Close'), ' ');
        if (import4.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            this.renderer.setText(this._text_1, currVal_2);
            this._expr_2 = currVal_2;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    _View_ToastCmp2.prototype._handle_click_0_0 = function ($event) {
        this.markPathToRootAsCheckOnce();
        var pd_0 = (this.parent.context.cbClick() !== false);
        return (true && pd_0);
    };
    return _View_ToastCmp2;
}(import1.AppView));
function viewFactory_ToastCmp2(viewUtils, parentInjector, declarationEl) {
    return new _View_ToastCmp2(viewUtils, parentInjector, declarationEl);
}
