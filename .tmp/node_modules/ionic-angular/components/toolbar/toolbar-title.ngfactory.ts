/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/render/api';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/element';
import * as import3 from 'ionic-angular/components/toolbar/toolbar-title';
import * as import4 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/change_detection';
import * as import8 from 'ionic-angular/config/config';
import * as import9 from '@angular/core/src/linker/element_ref';
import * as import10 from 'ionic-angular/components/toolbar/toolbar';
import * as import11 from 'ionic-angular/components/navbar/navbar';
import * as import12 from '@angular/core/src/metadata/view';
import * as import13 from '@angular/core/src/linker/component_factory';
import * as import14 from '@angular/common/src/directives/ng_class';
import * as import15 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import16 from '@angular/core/src/change_detection/differs/keyvalue_differs';
var renderType_ToolbarTitle_Host:import0.RenderComponentType = (null as any);
class _View_ToolbarTitle_Host0 extends import1.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import2.AppElement;
  _ToolbarTitle_0_4:import3.ToolbarTitle;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_ToolbarTitle_Host0,renderType_ToolbarTitle_Host,import6.ViewType.HOST,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    this._el_0 = this.selectOrCreateHostElement('ion-title',rootSelector,(null as any));
    this._appEl_0 = new import2.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_ToolbarTitle0(this.viewUtils,this.injector(0),this._appEl_0);
    this._ToolbarTitle_0_4 = new import3.ToolbarTitle(this.parentInjector.get(import8.Config),new import9.ElementRef(this._el_0),this.renderer,this.parentInjector.get(import10.Toolbar,(null as any)),this.parentInjector.get(import11.Navbar,(null as any)));
    this._appEl_0.initComponent(this._ToolbarTitle_0_4,([] as any[]),compView_0);
    compView_0.create(this._ToolbarTitle_0_4,this.projectableNodes,(null as any));
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import3.ToolbarTitle) && (0 === requestNodeIndex))) { return this._ToolbarTitle_0_4; }
    return notFoundResult;
  }
}
function viewFactory_ToolbarTitle_Host0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  if ((renderType_ToolbarTitle_Host === (null as any))) { (renderType_ToolbarTitle_Host = viewUtils.createRenderComponentType('',0,import12.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_ToolbarTitle_Host0(viewUtils,parentInjector,declarationEl);
}
export const ToolbarTitleNgFactory:import13.ComponentFactory<import3.ToolbarTitle> = new import13.ComponentFactory<import3.ToolbarTitle>('ion-title',viewFactory_ToolbarTitle_Host0,import3.ToolbarTitle);
const styles_ToolbarTitle:any[] = ([] as any[]);
var renderType_ToolbarTitle:import0.RenderComponentType = (null as any);
class _View_ToolbarTitle0 extends import1.AppView<import3.ToolbarTitle> {
  _el_0:any;
  _NgClass_0_3:import14.NgClass;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_ToolbarTitle0,renderType_ToolbarTitle,import6.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import2.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','toolbar-title');
    this._NgClass_0_3 = new import14.NgClass(this.parentInjector.get(import15.IterableDiffers),this.parentInjector.get(import16.KeyValueDiffers),new import9.ElementRef(this._el_0),this.renderer);
    this.renderer.projectNodes(this._el_0,import4.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this._expr_0 = import7.UNINITIALIZED;
    this._expr_1 = import7.UNINITIALIZED;
    this.init(([] as any[]),[this._el_0],([] as any[]),([] as any[]));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import14.NgClass) && (0 === requestNodeIndex))) { return this._NgClass_0_3; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0:any = 'toolbar-title';
    if (import4.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this._NgClass_0_3.klass = currVal_0;
      this._expr_0 = currVal_0;
    }
    const currVal_1:any = ('toolbar-title-' + this.context._mode);
    if (import4.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      this._NgClass_0_3.ngClass = currVal_1;
      this._expr_1 = currVal_1;
    }
    if (!throwOnChange) { this._NgClass_0_3.ngDoCheck(); }
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
}
export function viewFactory_ToolbarTitle0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<import3.ToolbarTitle> {
  if ((renderType_ToolbarTitle === (null as any))) { (renderType_ToolbarTitle = viewUtils.createRenderComponentType('',1,import12.ViewEncapsulation.None,styles_ToolbarTitle,{})); }
  return new _View_ToolbarTitle0(viewUtils,parentInjector,declarationEl);
}